name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  flake-update:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        input:
          - flake-utils
          - nixpkgs
          - pre-commit-hooks
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Update ${{ matrix.input }}
        uses: ./
        with:
          dependency: ${{ matrix.input }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-token: ${{ steps.generate_token.outputs.token }}
          pull-request-author: "Phillip Ground <cpcloudbot@gmail.com>"
          pull-request-labels: dependencies,autorebase:opt-in
          automerge: true
          delete-branch: true
  release:
    runs-on: ubuntu-latest
    concurrency: release
    needs:
      - flake-update
    steps:
      - name: Generate a GitHub token
        uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: setup nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: release
        run: npx -p '@semantic-release/commit-analyzer' -p '@semantic-release/release-notes-generator' -p '@semantic-release/github' -p '@semantic-release/git' -p semantic-release semantic-release
        env:
          GIT_CREDENTIALS: ${{ steps.generate_token.outputs.token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
